---
title: BumbleDocGen
---
# BumbleDocGen: A Documentation Generator for PHP projects 🐝

**BumbleDocGen** is a robust library for generating and maintaining documentation next to the code of large and small PHP projects.

This tool analyzes your codebase and produces a comprehensive set of Markdown documents, including descriptions of classes, methods, and properties alongside navigable internal links.

## Installation

Add the BumbleDocGen to the `composer.json` file of your project using the following command:

```console
composer require bumble-tech/bumble-doc-gen
```

## Detailed technical description

💡 Please refer to the [a x-title="Description of the technical part of the project"]Technical description of the project[/a] for a detailed explanation of all the classes and methods used.

## Core Features

1. 🔍 **[a x-title="Parsing"]Parser[/a]:**
  BumbleDocGen analyzes your code and provides a convenient [a]Reflection API[/a].

2. ✍️ **[a x-title="Rendering"]Renderer[/a]:**
  BumbleDocGen generates markdown content using templates and fills them with data obtained from parsing your code.

3. 🧠 **AI tools for documentation generation:**
  BumbleDocGen allows you to use a group of AI tools to help generate project documentation.

## How to Use

### Entry points

BumbleDocGen's interface consists of mainly two classes: [a]DocGenerator[/a] and [a]DocGeneratorFactory[/a].

- [a]DocGenerator[/a] provides main operations for generating the documents.

{{ displayClassApiMethods('\\BumbleDocGen\\DocGenerator') | addIndentFromLeft}}

- [a]DocGeneratorFactory[/a] provides a method for creating `DocGenerator` instance.

{{ displayClassApiMethods('\\BumbleDocGen\\DocGeneratorFactory') | addIndentFromLeft }}

### Examples of usage

1) Working with a library in a PHP file
    ```php
    require_once 'vendor/autoload.php';

    use BumbleDocGen\DocGeneratorFactory;

    // Initialize the factory
    $factory = new DocGeneratorFactory();

    // Create a DocGenerator instance
    $docgen = $factory->create('/path/to/configuration/files');

    // or $docgen = $factory->createByConfigArray([...]);

    // Now call the desired operation
    $docgen->generate();
    ```
2) Working with the library through a console application
    ```bash
    # List of available commands
    ./vendor/bin/bumbleDocGen list

    # Documentation generation example
    ./vendor/bin/bumbleDocGen generate -c <path to config file>

    # Getting detailed information about a command
    ./vendor/bin/bumbleDocGen generate -h
    ```

------------------

**This documentation was generated using the Bumble Documentation Generator, and is an example of how it works.**

To update this documentation, run the following command:

```console
./bin/bumbleDocGen generate
```
