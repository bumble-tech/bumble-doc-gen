---
title: Plugin system
prevPage: Technical description of the project
---
{{ generatePageBreadcrumbs(title, _self) }}

# Plugin system

The documentation generator includes the ability to expand the functionality using plugins that allow you to add the necessary functionality to the system without changing its core.

The system is built on the basis of an event model, each plugin class must implement [a]PluginInterface[/a].

## Configuration example

You can add your plugins to the configuration like this:

```yaml
plugins:
  - class: \SelfDocConfig\Plugin\TwigFilterClassParser\TwigFilterClassParserPlugin
  - class: \SelfDocConfig\Plugin\TwigFunctionClassParser\TwigFunctionClassParserPlugin
```

## Default plugins

Below are the plugins that are available by default when working with the library.
Plugins for any programming languages work regardless of which language handler is configured in the configuration.

| Plugin | PL | Handles events | Description |
|-|-|-|-|
{% for pluginEntity in phpEntities
        .filterByPaths([
            '/src/Core',
            '/src/LanguageHandler',
         ])
        .filterByInterfaces(['BumbleDocGen\\Core\\Plugin\\PluginInterface'])
        .getOnlyInstantiable()
%}
{% set match = pluginEntity.getRelativeFileName() | preg_match('/(\\/LanguageHandler\\/)([\\s\\S]*?)(?=\\/)/i') %}
| {{ drawDocumentedEntityLink(pluginEntity) }} | {% if match[2] %}{{ match[2] | upper }}{% else %}any{% endif %} | <ul>{% for key in pluginEntity.getMethod('getSubscribedEvents', true).getFirstReturnValue() | keys %}<li> [a]{{ key }}|short_form[/a] </li>{% endfor %}</ul> | {{ pluginEntity.getDescription() | removeLineBrakes }} |
{% endfor %}

## Default events

{{ printEntityCollectionAsList( phpEntities
        .filterByPaths([
            '/src/Core',
            '/src/LanguageHandler',
         ])
        .filterByParentClassNames(['Symfony\\Contracts\\EventDispatcher\\Event'])
        .getOnlyInstantiable() ) }}

## Adding a new plugin

If you decide to add a new plugin, there are a few things you need to do:

### 1) Add plugin class and implement events handling

```php
namespace Demo\Plugin\DemoFakeResourceLinkPlugin;

final class DemoFakeResourceLinkPlugin implements \BumbleDocGen\Core\Plugin\PluginInterface
{
    public static function getSubscribedEvents(): array
    {
        return [
            \BumbleDocGen\Core\Plugin\Event\Renderer\OnGettingResourceLink::class => 'onGettingResourceLink',
        ];
    }

    public function onGettingResourceLink(OnGettingResourceLink $event): void
    {
        if (!$event->getResourceUrl()) {
            $event->setResourceUrl("https://google.com");
        }
    }
}
```

### 2) Add the new plugin to the configuration

```yaml
plugins:
  - class: \Demo\Plugin\DemoFakeResourceLinkPlugin\DemoFakeResourceLinkPlugin
```
