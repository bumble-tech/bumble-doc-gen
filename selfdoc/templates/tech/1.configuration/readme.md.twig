{% set title = 'Configuration files' %}
{{ generatePageBreadcrumbs(title, _self) }}

{{ "Configuration" | textToHeading('H1') }}

Documentation generator configuration can be stored in special files.
They can be in different formats: <a href='https://yaml.org/'>yaml</a>, <a href='https://www.json.org/json-en.html'>json</a>, <a href='https://www.php.net/manual/en/language.types.array.php'>php arrays</a>, <a href='https://learn.microsoft.com/en-us/previous-versions/windows/desktop/ms717987(v=vs.85)'>ini</a>, <a href='https://www.w3.org/XML/'>xml</a>

But it is not necessary to use files to store the configuration; you can also initialize the documentation generator instance by passing there an array of configuration parameters (see <a href='https://github.com/bumble-tech/bumble-doc-gen/tree/master/demo'>demo-5</a>)

During the instance creation process, configuration data is loaded into [a]Configuration[/a] class, and the code works directly with it.

{{ "Configuration file example" | textToHeading('H2') }}

Let's look at an example of a real configuration in more detail:

{{ fileGetContents('%WORKING_DIR%/bumble_doc_gen.yaml') | textToCodeBlock('yaml') }}

In this example, we see the real configuration of the self-documentation of this project.

**Here is an example of loading this configuration in PHP code:**

{{ "// Single file
$docGenerator = (new DocGeneratorFactory())->create('config.yaml');

// Multiple files
$docGenerator = (new DocGeneratorFactory())->create('config.yaml', 'config2.yaml', 'config3.xml');
" | textToCodeBlock('php') }}

{{ "Handling and inheritance of configuration files" | textToHeading('H2') }}

The documentation generator can work with several configuration files at once.
When processing configuration files, each subsequent file has a higher priority and overwrites the previously defined parameters, but if the parameter has not yet been defined before, it will be added.

Each default configuration file inherits the base configuration: `BumbleDocGen/Core/Configuration/defaultConfiguration.yaml`, but the parent configuration file can be changed using the `parent_configuration` parameter.
The inheritance algorithm is as follows: scalar types can be overwritten by each subsequent configuration, while arrays are supplemented with new data instead of overwriting.

{{ "Configuration parameters" | textToHeading('H2') }}

{% set parameters = getConfigParametersDescription(phpClassEntityCollection, '%WORKING_DIR%/src/Core/Configuration/defaultConfiguration.yaml') %}

<table>
    <tr>
        <th>Key</th>
        <th>Type</th>
        <th>Default value</th>
        <th>Description</th>
    </tr>
{% for parameter in parameters %}
    <tr>
        <td><b>{{ parameter.key }}</b></td>
        <td><i>{{ parameter.type }}</i></td>
        <td>{{ parameter.defaultValue | raw }}</td>
        <td>{{ parameter.description }}</td>
    </tr>
{% endfor %}
</table>
